// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OwnerToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OwnerToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerToken", id.toString(), this);
  }

  static load(id: string): OwnerToken | null {
    return store.get("OwnerToken", id) as OwnerToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isGame(): boolean {
    let value = this.get("isGame");
    return value.toBoolean();
  }

  set isGame(value: boolean) {
    this.set("isGame", Value.fromBoolean(value));
  }

  get licenseToken(): string {
    let value = this.get("licenseToken");
    return value.toString();
  }

  set licenseToken(value: string) {
    this.set("licenseToken", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }
}

export class LicenseToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LicenseToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LicenseToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LicenseToken", id.toString(), this);
  }

  static load(id: string): LicenseToken | null {
    return store.get("LicenseToken", id) as LicenseToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerToken(): string {
    let value = this.get("ownerToken");
    return value.toString();
  }

  set ownerToken(value: string) {
    this.set("ownerToken", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get remainingLicenses(): BigInt {
    let value = this.get("remainingLicenses");
    return value.toBigInt();
  }

  set remainingLicenses(value: BigInt) {
    this.set("remainingLicenses", Value.fromBigInt(value));
  }

  get holders(): Array<string> {
    let value = this.get("holders");
    return value.toStringArray();
  }

  set holders(value: Array<string>) {
    this.set("holders", Value.fromStringArray(value));
  }
}

export class Holder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Holder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Holder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Holder", id.toString(), this);
  }

  static load(id: string): Holder | null {
    return store.get("Holder", id) as Holder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerTokens(): Array<string> {
    let value = this.get("ownerTokens");
    return value.toStringArray();
  }

  set ownerTokens(value: Array<string>) {
    this.set("ownerTokens", Value.fromStringArray(value));
  }

  get licenseTokens(): Array<string> {
    let value = this.get("licenseTokens");
    return value.toStringArray();
  }

  set licenseTokens(value: Array<string>) {
    this.set("licenseTokens", Value.fromStringArray(value));
  }
}

export class HolderLicenseToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HolderLicenseToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HolderLicenseToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HolderLicenseToken", id.toString(), this);
  }

  static load(id: string): HolderLicenseToken | null {
    return store.get("HolderLicenseToken", id) as HolderLicenseToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holder(): string {
    let value = this.get("holder");
    return value.toString();
  }

  set holder(value: string) {
    this.set("holder", Value.fromString(value));
  }

  get licenseToken(): string {
    let value = this.get("licenseToken");
    return value.toString();
  }

  set licenseToken(value: string) {
    this.set("licenseToken", Value.fromString(value));
  }
}
